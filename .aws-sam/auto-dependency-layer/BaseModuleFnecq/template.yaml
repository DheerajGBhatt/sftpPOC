AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: SAM Template
Globals:
  Function:
    Timeout: 30
Parameters:
  SftpUsername:
    Type: String
    Default: SFTPUserName
    Description: SFTP Username
  SftpPassword:
    Type: String
    NoEcho: true
    Default: Verystrongpassph@se8
    Description: SFTP Password
  AzureDomain:
    Type: String
    Description: Domain name associated with Azure AD, e.g. example.com
    NoEcho: true
    Default: SFT12345678
  AzureClientId:
    Type: String
    Description: Azure Client ID
    NoEcho: true
    Default: SFT12345678
Resources:
  SftpServerS3Buckets:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: my-sftp-buckets
  SftpServer:
    Type: AWS::Transfer::Server
    Properties:
      IdentityProviderType: AWS_LAMBDA
      SecurityPolicyName: TransferSecurityPolicy-2020-06
      IdentityProviderDetails:
        Function:
          Fn::GetAtt:
          - SftpGetUserConfigLambdaFunction
          - Arn
        SftpAuthenticationMethods: PASSWORD
      Protocols:
      - SFTP
      EndpointType: PUBLIC
      LoggingRole:
        Fn::GetAtt:
        - AWSTransferLoggingAccess
        - Arn
      Tags:
      - Key: Name
        Value: MySftpServer
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName:
        Fn::Sub: ${AWS::StackName}-user-pool
      UsernameConfiguration:
        CaseSensitive: true
      AccountRecoverySetting:
        RecoveryMechanisms:
        - Name: admin_only
          Priority: 1
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
          TemporaryPasswordValidityDays: 1
      UserPoolTags:
        StackName:
          Ref: AWS::StackName
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName:
        Fn::Sub: ${AWS::StackName}-client
      GenerateSecret: false
      UserPoolId:
        Ref: UserPool
      ExplicitAuthFlows:
      - ALLOW_USER_PASSWORD_AUTH
      - ALLOW_REFRESH_TOKEN_AUTH
  AWSTransferLoggingAccess:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - transfer.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: AWSTransferLoggingPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:DescribeLogStreams
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:log-group:/aws/transfer/*
  SftpUserPassword:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name:
        Fn::Sub: /SFTP/${SftpUsername}
      SecretString:
        Fn::Sub: '{"Password": "${SftpPassword}","Role": "arn:aws:iam::${AWS::AccountId}:role/${SftpAccessRole}","HomeDirectory":
          "/my-sftp-buckets/home" ,"AzureADDomain" : "${AzureDomain}", "AzureADClientID"
          : "${AzureClientId}","userpoolid": "${UserPool}" ,"userpoolclientid":"${UserPoolClient}"}'
  SftpAccessLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: SftpAccessLambdaFunction
      Handler: app.lambdaHandler
      Runtime: nodejs14.x
      Policies:
      - AWSLambdaBasicExecutionRole
      - AmazonS3FullAccess
      Events:
        S3Event:
          Type: S3
          Properties:
            Bucket:
              Ref: SftpServerS3Buckets
            Events: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                - Name: prefix
                  Value: home/
      Layers:
      - Fn::GetAtt:
        - AwsSamAutoDependencyLayerNestedStack
        - Outputs.BaseModuleFnecqSftpAccessLambdaFunction8632268fDepLayer
    Metadata:
      SamResourceId: SftpAccessLambdaFunction
  SftpAccessRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - transfer.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - Ref: SftpAccessPolicy
  SftpAccessPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: SftpAccessPolicy
      Description: Sftp access policy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - s3:ListBucket
          - s3:GetBucketLocation
          Resource:
            Fn::Sub:
            - arn:aws:s3:::${BucketName}
            - BucketName:
                Ref: SftpServerS3Buckets
        - Effect: Allow
          Action:
          - s3:PutObject
          - s3:GetObject
          - s3:DeleteObjectVersion
          - s3:DeleteObject
          - s3:GetObjectVersion
          Resource:
            Fn::Sub:
            - arn:aws:s3:::${BucketName}/*/*
            - BucketName:
                Ref: SftpServerS3Buckets
  SftpGetUserConfigLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: SftpGetUserConfigLambdaFunction
      Handler: app.lambdaHandler
      Runtime: nodejs14.x
      Policies:
      - AWSLambdaBasicExecutionRole
      - AmazonS3FullAccess
      - Statement:
        - Sid: VisualEditor
          Effect: Allow
          Action:
          - secretsmanager:GetSecretValue
          - logs:CreateLogGroup
          Resource:
          - Ref: SftpUserPassword
      Environment:
        Variables:
          SecretsManagerRegion:
            Ref: AWS::Region
      Layers:
      - Fn::GetAtt:
        - AwsSamAutoDependencyLayerNestedStack
        - Outputs.BaseModuleFnecqSftpGetUserConfigLambdaFunctionb6a78a82DepLayer
    Metadata:
      SamResourceId: SftpGetUserConfigLambdaFunction
  SftpGetUserConfigLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Fn::GetAtt:
        - SftpGetUserConfigLambdaFunction
        - Arn
      Action: lambda:InvokeFunction
      Principal: transfer.amazonaws.com
      SourceArn:
        Fn::GetAtt:
        - SftpServer
        - Arn
  SftpAzureLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: SftpAzureLambdaFunction
      Handler: app.lambdaHandler
      Runtime: nodejs14.x
      Policies:
      - AWSLambdaBasicExecutionRole
      - AmazonS3FullAccess
      - Statement:
        - Sid: VisualEditor
          Effect: Allow
          Action:
          - secretsmanager:GetSecretValue
          - logs:CreateLogGroup
          Resource:
          - Ref: SftpUserPassword
      Environment:
        Variables:
          AzureClientId:
            Ref: AzureClientId
          AzureDomain:
            Ref: AzureDomain
          AzureClientIdSecretKey: AzureADClientID
          AzureSecrets:
            Fn::Sub: /SFTP/${SftpUsername}
          AzureDomainSecretKey: AzureADDomain
          Region:
            Ref: AWS::Region
          S3BucketName:
            Ref: SftpServerS3Buckets
          TransferRoleARN:
            Fn::GetAtt:
            - SftpAccessRole
            - Arn
      Layers:
      - Fn::GetAtt:
        - AwsSamAutoDependencyLayerNestedStack
        - Outputs.BaseModuleFnecqSftpAzureLambdaFunction3c7c68a4DepLayer
    Metadata:
      SamResourceId: SftpAzureLambdaFunction
  SftpAzureLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Fn::GetAtt:
        - SftpAzureLambdaFunction
        - Arn
      Action: lambda:InvokeFunction
      Principal: transfer.amazonaws.com
      SourceArn:
        Fn::GetAtt:
        - SftpServer
        - Arn
  SftpCognitoLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: SftpCognitoLambdaFunction
      Handler: app.lambdaHandler
      Environment:
        Variables:
          bucketname:
            Ref: SftpServerS3Buckets
          TransferAccessRole:
            Fn::GetAtt:
            - SftpAccessRole
            - Arn
          SecretsManagerRegion:
            Ref: AWS::Region
          UserPool:
            Ref: UserPool
      Description: A function to provide IAM roles and policies for given user and
        serverId.
      Runtime: nodejs14.x
      Policies:
      - AWSLambdaBasicExecutionRole
      - AmazonS3FullAccess
      - Statement:
        - Sid: VisualEditor
          Effect: Allow
          Action:
          - secretsmanager:GetSecretValue
          - logs:CreateLogGroup
          Resource:
          - Ref: SftpUserPassword
      - Statement:
        - Sid: VisualEditor1
          Effect: Allow
          Action:
          - cognito-idp:InitiateAuth
          - cognito-idp:AdminSetUserPassword
          Resource:
          - Fn::Sub: arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPool}
      - Statement:
        - Sid: VisualEditor2
          Effect: Allow
          Action:
          - cognito-idp:AdminSetUserPassword
          Resource:
          - Fn::Sub: arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPool}/*
      Layers:
      - Fn::GetAtt:
        - AwsSamAutoDependencyLayerNestedStack
        - Outputs.BaseModuleFnecqSftpCognitoLambdaFunctione035f84dDepLayer
    Metadata:
      SamResourceId: SftpCognitoLambdaFunction
  SftpCognitoLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Fn::GetAtt:
        - SftpCognitoLambdaFunction
        - Arn
      Action: lambda:InvokeFunction
      Principal: transfer.amazonaws.com
      SourceArn:
        Fn::GetAtt:
        - SftpServer
        - Arn
  ObjectLambdaAccessPoint:
    Type: AWS::S3ObjectLambda::AccessPoint
    Properties:
      Name: sftpbjectlambdaaccesspoint
      ObjectLambdaConfiguration:
        SupportingAccessPoint:
          Fn::GetAtt:
          - SupportingAccessPoint
          - Arn
        AllowedFeatures:
        - GetObject-Range
        - GetObject-PartNumber
        - HeadObject-Range
        - HeadObject-PartNumber
        TransformationConfigurations:
        - Actions:
          - GetObject
          - ListObjects
          - ListObjectsV2
          - HeadObject
          ContentTransformation:
            AwsLambda:
              FunctionArn:
                Fn::GetAtt:
                - SftpAccessLambdaFunction
                - Arn
              FunctionPayload:
                Ref: SftpAccessLambdaFunction
  SupportingAccessPoint:
    Type: AWS::S3::AccessPoint
    Properties:
      Bucket:
        Ref: SftpServerS3Buckets
  AwsSamAutoDependencyLayerNestedStack:
    DeletionPolicy: Delete
    Metadata:
      CreatedBy: AWS SAM CLI sync command
    Properties:
      TemplateURL: /Users/dheerajbhatt/proj/myccp/sftpPOC/.aws-sam/auto-dependency-layer/BaseModuleFnecq/adl_nested_template.yaml
    Type: AWS::CloudFormation::Stack
Outputs:
  ObjectLambdaAccessPoint:
    Description: The Amazon S3 Object Lambda Access Point created by this CloudFormation
      stack.
    Value:
      Ref: ObjectLambdaAccessPoint
